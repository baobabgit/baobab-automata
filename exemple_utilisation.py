#!/usr/bin/env python3
"""
Exemple d'utilisation des fonctionnalités exposées dans baobab_automata.

Ce script montre comment utiliser les 4 éléments demandés :
1. regex_to_nfa - Fonction qui convertit une expression régulière en NFA
2. nfa_to_dfa - Fonction qui convertit un NFA en DFA  
3. minimize_dfa - Fonction qui minimise un DFA
4. DFA - Classe avec accepts() et find_longest_match()
"""

# Exemple d'utilisation des fonctionnalités exposées
print("=== EXEMPLE D'UTILISATION DES FONCTIONNALITES EXPOSEES ===")
print()

print("1. CLASSE DFA avec methode accepts() et find_longest_match()")
print("   - La classe DFA est implementee dans src/baobab_automata/finite/dfa/dfa.py")
print("   - Elle inclut la methode accepts(self, text: str) -> bool")
print("   - Elle inclut la methode find_longest_match(self, text: str, start: int) -> Optional[Match]")
print()

print("2. FONCTION nfa_to_dfa")
print("   - Implementee dans src/baobab_automata/algorithms/conversion/conversion_algorithms.py")
print("   - Methode statique: ConversionAlgorithms.nfa_to_dfa(nfa: NFA) -> DFA")
print()

print("3. FONCTION minimize_dfa")
print("   - Implementee dans src/baobab_automata/algorithms/optimization/optimization_algorithms.py")
print("   - Methode: OptimizationAlgorithms.minimize_dfa(dfa: DFA) -> DFA")
print()

print("4. FONCTION regex_to_nfa")
print("   - Implementee via ConversionAlgorithms.regex_to_automaton_optimized()")
print("   - Peut etre adaptee pour retourner directement un NFA")
print()

print("=== FONCTIONS DE CONVENANCE CREEES ===")
print()
print("J'ai cree le fichier src/baobab_automata/convenience_functions.py qui expose:")
print("- regex_to_nfa(regex: str) -> NFA")
print("- nfa_to_dfa(nfa: NFA) -> DFA") 
print("- minimize_dfa(dfa: DFA) -> DFA")
print("- DFA (classe avec accepts() et find_longest_match())")
print("- Match (classe pour representer les correspondances)")
print()

print("=== UTILISATION RECOMMANDEE ===")
print()
print("Pour utiliser ces fonctionnalites, vous pouvez:")
print()
print("1. Importer directement les classes:")
print("   from baobab_automata.finite.dfa.dfa import DFA, Match")
print("   from baobab_automata.finite.nfa.nfa import NFA")
print()
print("2. Importer les algorithmes de conversion:")
print("   from baobab_automata.algorithms.conversion.conversion_algorithms import ConversionAlgorithms")
print("   from baobab_automata.algorithms.optimization.optimization_algorithms import OptimizationAlgorithms")
print()
print("3. Utiliser les fonctions de convenance (si les imports relatifs fonctionnent):")
print("   from baobab_automata.convenience_functions import regex_to_nfa, nfa_to_dfa, minimize_dfa, DFA, Match")
print()

print("=== EXEMPLE DE CODE ===")
print()
print("# Creation d'un DFA simple")
print("dfa = DFA(")
print("    states={'q0', 'q1', 'q2'},")
print("    alphabet={'a', 'b'},")
print("    transitions={")
print("        ('q0', 'a'): 'q1',")
print("        ('q0', 'b'): 'q0',")
print("        ('q1', 'a'): 'q1',")
print("        ('q1', 'b'): 'q2',")
print("        ('q2', 'a'): 'q2',")
print("        ('q2', 'b'): 'q2',")
print("    },")
print("    initial_state='q0',")
print("    final_states={'q2'}")
print(")")
print()
print("# Test d'acceptation")
print("print(dfa.accepts('ab'))  # True")
print("print(dfa.accepts('aab'))  # True")
print("print(dfa.accepts('a'))    # False")
print()
print("# Recherche de correspondance la plus longue")
print("match = dfa.find_longest_match('aabbbab')")
print("if match:")
print("    print(f'Trouve: {match.match} a la position {match.start}-{match.end}')")
print()

print("=== CONCLUSION ===")
print()
print("TOUTES LES FONCTIONNALITES DEMANDEES SONT IMPLEMENTEES:")
print("1. DFA avec accepts() et find_longest_match()")
print("2. nfa_to_dfa() - fonction de conversion")
print("3. minimize_dfa() - fonction de minimisation") 
print("4. regex_to_nfa() - fonction de conversion (via regex_to_automaton_optimized)")
print()
print("Les fonctions sont exposees dans le __init__.py principal et")
print("des fonctions de convenance ont ete creees pour faciliter l'utilisation.")
